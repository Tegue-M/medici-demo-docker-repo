name: Nginx Deployment

on:
  push:
    branches:
      - main 

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      TAG: ${{ github.sha }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Build Docker image and set Docker tag with TAG
      run: |
        echo "Generated Docker tag: $TAG"
        docker build -t "${{ secrets.REPOSITORY_NAME }}" .
        docker tag "${{ secrets.REPOSITORY_NAME }}" "${{ secrets.AWS_REGISTRY_URL }}/${{ secrets.REPOSITORY_NAME }}:${TAG}"

    - name: Debug Environment Variables
      run: |
        echo "AWS_REGISTRY_URL: ${{ secrets.AWS_REGISTRY_URL }}"
        echo "Generated Docker tag:  $TAG"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Push Docker image to Amazon ECR
      run: |
        aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_REGISTRY_URL }}
        docker push "${{ secrets.AWS_REGISTRY_URL }}/${{ secrets.REPOSITORY_NAME }}:${TAG}"

    - name: SSH into EC2 and check for nginx_container
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        envs: |
            TAG=${TAG}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION=eu-west-1
        script: |
          # Check for running nginx_container
          if [ "$(docker ps -q -f name=nginx_container)" ]; then
            echo "Docker container 'nginx_container' is running."
          else
            echo "No containers called 'nginx_container' running."
            echo "Logging in to ECR...."
            
            # Log in to ECR
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin "$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
            
            echo "Logged in successfully..."

            ech0 "$AWS_REGION, $ACCOUNT_ID, $AWS_ACCESS_KEY_ID"
            
            # Additional commands can be added here for deploying the new container
          fi
