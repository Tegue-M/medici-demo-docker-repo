name: Nginx Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      TAG: ${{ github.sha }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Build Docker image and set Docker tag with TAG
      run: |
        echo "Generated Docker tag: $TAG"
        docker build -t "${{ secrets.REPOSITORY_NAME }}" .
        docker tag "${{ secrets.REPOSITORY_NAME }}" "${{ secrets.AWS_REGISTRY_URL }}/${{ secrets.REPOSITORY_NAME }}:${TAG}"

    - name: Debug Environment Variables
      run: |
        echo "AWS_REGISTRY_URL: ${{ secrets.AWS_REGISTRY_URL }}"
        echo "Generated Docker tag:  $TAG"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Push Docker image to Amazon ECR
      run: |
        aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_REGISTRY_URL }}
        docker push "${{ secrets.AWS_REGISTRY_URL }}/${{ secrets.REPOSITORY_NAME }}:${TAG}"

    - name: Manual Approval Step
      uses: FredrikNoren/await-approval-action@v1.0.1
      with:
        approvers: 'your-username'  # Replace 'your-username' with your GitHub username
        timeout: '15m'  # Set a timeout for the approval

    - name: SSH into EC2 and deploy nginx_container
      if: ${{ steps.manual_approval.outputs.approved == 'true' }}
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        envs: |
          TAG=${{ env.TAG }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
        script: |
          export TAG="${{ env.TAG }}"
          export AWS_REGION="${{ secrets.AWS_REGION }}"
          export ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"

          echo "These are my environment variables:"
          echo "TAG: ${TAG}"
          echo "AWS_REGION: ${AWS_REGION}"
          echo "ACCOUNT_ID: ${ACCOUNT_ID}"

          echo "Checking for existing nginx_container..."
          if docker ps -a --format '{{.Names}}' | grep -Eq '^nginx_container$'; then
            echo "Stopping existing nginx_container..."
            docker stop nginx_container || true

            echo "Removing existing nginx_container..."
            docker rm nginx_container || true
          else
            echo "No existing nginx_container found."
          fi

          echo "Logging in to Amazon ECR..."
          if aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${{ secrets.AWS_REGISTRY_URL }}; then
            echo "Successfully logged in to Amazon ECR."
          else
            echo "Failed to log in to Amazon ECR."
            exit 1
          fi

          echo "Pulling image from ECR..."
          if docker pull "${{ secrets.AWS_REGISTRY_URL }}/${{ secrets.REPOSITORY_NAME }}:${TAG}"; then
            echo "Docker pull completed."
          else
            echo "Failed to pull image from ECR."
            exit 1
          fi

          echo "Running the nginx_container..."
          if docker run -d --name nginx_container -p 80:80 "${{ secrets.AWS_REGISTRY_URL }}/${{ secrets.REPOSITORY_NAME }}:${TAG}"; then
            echo "nginx_container is running on port 80."
          else
            echo "Failed to start nginx_container."
            exit 1
          fi
